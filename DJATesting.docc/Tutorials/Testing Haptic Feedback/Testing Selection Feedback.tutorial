@Tutorial(time: 2) {
    @Intro(title: "Testing Selection Feedback") {
        Many app user interfaces include some kind of data entry. When this 
        invloves the user making a selection, `UISelectionFeedbackGenerator` is
        a great way to provide extra feedback to the user about the choice they 
        have made. Adding tests for these haptics allows us to ensure that we're
        giving users the feedback that they expect.
        
        @Image(source: "Haptics.png", alt: "An image representing haptic feedback")
    }
    
    @Section(title: "Making a Selection") {
        @ContentAndMedia {
            We will begin by creating a user interface that includes the ability
            for the user to make a choice between two options.
        }
        
        @Steps {
            @Step {
                First, we create a new view named `OptionView`, which will be 
                used to allow the user to choose between two options. We pass a
                selection feedback generator in its initialiser, with a default
                value so that we don't have to create one at every call site.
                
                @Code(name: "OptionView.swift", file: Testing-Selection-Feedback-01.swift)
            }
            
            @Step {
                Next, we add two buttons. One allows the user to select "Yes",
                the other "No". When the user selects one of these options, 
                selection feedback is generated.
                
                @Code(name: "OptionView.swift", file: Testing-Selection-Feedback-02.swift)
            }
        }
    }
    
    @Section(title: "Testing Selection Feedback") {
        @ContentAndMedia {
            Now it is time to test our `OptionView` to make sure that it 
            provides the feedback that we expect.
        }
        
        @Steps {
            @Step {
                First we will set up our test case. We will need a reference to
                an instance of our view controller, and a function to create one
                for testing. We also create an instance of DJATesting's 
                `MockSelectionFeedbackGenerator`, which is injected in to the 
                initialiser of the `OptionView` being tested.
                
                @Code(name: "OptionViewTests.swift", file: Testing-Selection-Feedback-03.swift)
            }
            
            @Step {
                Next we add functions to simulate the user tapping on the "Yes" 
                and "No" buttons. We do this by making use of DJATesting's 
                `simulatePrimaryActionTriggered` extension function on 
                `UIControl`.
                
                @Code(name: "OptionViewTests.swift", file: Testing-Selection-Feedback-04.swift)
            }
            
            @Step {
                Now we add our tests for the behaviour when the user taps on 
                the buttons. We can verify that when tapping on the "Yes" or 
                the "No" buttons that selection feedback is generated by 
                asserting that the mock selection feedback generator's 
                ``DJATesting/MockSelectionFeedbackGenerator/receivedSelectionChangedMessage``
                property is `true`.
                
                @Code(name: "OptionViewTests.swift", file: Testing-Selection-Feedback-05.swift)
            }
        }
    }
}
