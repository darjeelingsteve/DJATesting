@Tutorial(time: 3) {
    @Intro(title: "Testing UIKeyCommand") {
        Keyboard shortcuts, a long-standing productivity benefit on desktop 
        software systems, made their way to iPad users with iPadOS 13.
        
        @Image(source: "Hardware.png", alt: "An image representing hardware")
    }
    
    @Section(title: "Responding to Keyboard Shortcuts") {
        @ContentAndMedia {
            To demonstrate how to test `UIKeyCommand` integration, we will build
            a view controller that responds to a keyboard shortcut.
        }
        
        @Steps {
            @Step {
                We start with a view controller that shows a list of items, and
                has a delegate that it messages when the user wishes to create a
                new item.
                
                @Code(name: "MyViewController.swift", file: Testing-UIKeyCommand-01.swift)
            }
            
            @Step {
                Next, we add a function, suitable for use by a key command, that
                messages the delegate to create a new item.
                
                @Code(name: "MyViewController.swift", file: Testing-UIKeyCommand-02.swift)
            }
            
            @Step {
                Finally we declare a key command that, when invoked, calls the 
                function that we just added.
                
                @Code(name: "MyViewController.swift", file: Testing-UIKeyCommand-03.swift)
            }
        }
    }
    
    @Section(title: "Testing UIKeyCommand Integration") {
        @ContentAndMedia {
            With our view controller configured for keyboard-shortcut response,
            let's see how to test it.
        }
        
        @Steps {
            @Step {
                First we will set up our test case. We will need a reference to
                an instance of our view controller, and a function to create one
                for testing.
                
                @Code(name: "MyViewControllerTests.swift", file: Testing-UIKeyCommand-04.swift)
            }
            
            @Step {
                Next we create a mock of our view controller's delegate, and
                assign it to the view controller being tested.
                
                @Code(name: "MyViewControllerTests.swift", file: Testing-UIKeyCommand-05.swift)
            }
            
            @Step {
                Now we can add a function to simulate the user invoking the
                "Create New Item…" key command, using the 
                `-[UIKeyCommand simulateCommandInvocationOnResponder:]` function
                from DJATesting.
                
                @Code(name: "MyViewControllerTests.swift", file: Testing-UIKeyCommand-06.swift)
            }
            
            @Step {
                Finally, we add a test function to assert that when the "Create 
                New Item…" key command is invoked, the delegate is sent the 
                request new item creation message.
                
                @Code(name: "MyViewControllerTests.swift", file: Testing-UIKeyCommand-07.swift)
            }
        }
    }
}
